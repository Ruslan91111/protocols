"""
Тестирование модуля process_tables.py

Работа с данными, собранными в таблицы. А именно, удаление ненужных строк,
удаление пустой колонки слева, исправление ошибочных соединений и разделений таблиц.
"""
import pytest

from league_sert.data_preparation.process_tables import (
    rm_blank_rows_in_tab, rm_first_col_if_blank, join_split_rows,
    divide_the_table, fix_centimeter_cell)

test_data_for_rm = [
    ['|\tНаименованиепоказателя', 'Результат', 'Требования НД ТР ТС 029/2012', 'НД на методы испытании'],
    ['показателя', 'испытаний', 'НД', ''],
    ['Микробиологические показатели', 'Микробиологические показатели', 'Микробиологические показатели',
     'Микробиологические показатели'],
    ['Массовая доля сорбиновой кислоты, мг/кг', '<1,0*', 'не более 2000', 'М 04-58-2009'],
    ['1 Массовая доля бензойной кислоты, мг/кг', '<1,0*', '-', 'М 04-58-2009'],
    ['что-то', ''],
]


def test_rm_blank_rows_in_tab():
    """ Убрать строки с пустыми значениями и одинаково повторяющимися
    показателями или определенными словами."""

    rows_result = rm_blank_rows_in_tab(test_data_for_rm)
    print(rows_result)
    assert len(rows_result) == 3
    assert rows_result[0] == test_data_for_rm[0]
    assert rows_result[1] == test_data_for_rm[3]
    assert rows_result[2] == test_data_for_rm[4]


test_data_blank_1_col = [
    ['', 'Наименование показателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
    ['', '- свинец', '0,058±0,021', 'не более 0,35', 'М-02-1702-20'],
    ['', '- мышьяк', '<0,01*', 'не более 0,15', 'М-02-1702-20'],
    ['', '- кадмий', '< 0,005*', 'не более 0,07', 'М-02-1702-20'],
    ['', '• ртуть', '< 0,002*', 'не более 0,015', 'ГОСТ Р 53183-2008'],
]


def test_rm_first_col_if_blank():
    """ Убрать пустую колонку слева. """
    result_tab = rm_first_col_if_blank(test_data_blank_1_col)
    for row in result_tab:
        assert len(row) == 4


test_data_join_split_row = [
    ['', 'Наименование', 'Результат', 'Требования НДМУ 4.1./4.2.2484-09', '11Д па методы'],
    ['', 'показателя', 'Результат', 'ГОСТ Р 52253-04', 'испытании'],
    ['', 'Массовая доля масляной кислоты (Ст о), %', '3,2±0,4', '2,0-4,2', 'ГОСТ 32915-2014'],
    ['', 'Массовая доля капроновой кислоты (СТо), %', '2,2±0,4', '1,5-3,0', 'ГОСТ 32915-2014'],
]


def test_join_split_rows():
    result_table = join_split_rows(test_data_join_split_row)
    assert result_table[0] == [' ', 'Наименование показателя', 'Результат Результат',
                               'Требования НДМУ 4.1./4.2.2484-09 ГОСТ Р 52253-04',
                               '11Д па методы испытании']
    assert result_table[1] == test_data_join_split_row[2]


@pytest.mark.parametrize('table_rows, expected', [
    ([
         ['Наименованиепоказателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные '
          'микроорганизмы групп В. ccreus', 'не обнаружено', 'не допускаются в 1 г', 'ГОСТ 30425-97'],
         ['Спорообразующие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'групп B.polymyxa', 'нс обнаружено', '(см’)', 'ГОСТ 30425-97'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'группы В. subtilis', 'не обнаружено', 'не более 11 клеток в 1 г (см³)', 'ГОСТ 30425-97']
     ], 'не допускаются в 1 г (см’)'),

    ([
         ['Наименованиепоказателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные '
          'микроорганизмы групп В. ccreus', 'не обнаружено', 'не допускаются в 1 г', 'ГОСТ 30425-97'],
         ['Спорообразующие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'групп B.polymyxa', 'нс обнаружено', '(см³)', 'ГОСТ 30425-97'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'группы В. subtilis', 'не обнаружено', 'не более 11 клеток в 1 г (см³)', 'ГОСТ 30425-97'],
     ], 'не допускаются в 1 г (см³)'),

    ([
         ['Наименованиепоказателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные '
          'микроорганизмы групп В. ccreus', 'не обнаружено', 'не допускаются в 1 г', 'ГОСТ 30425-97'],
         ['Спорообразующие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'групп B.polymyxa', 'нс обнаружено', 'см³', 'ГОСТ 30425-97'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'группы В. subtilis', 'не обнаружено', 'не более 11 клеток в 1 г (см³)', 'ГОСТ 30425-97'],
     ], 'не допускаются в 1 г см³'),

    ([
         ['Наименованиепоказателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные '
          'микроорганизмы групп В. ccreus', 'не обнаружено', 'не допускаются в 1 г', 'ГОСТ 30425-97'],
         ['Спорообразующие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'групп B.polymyxa', 'нс обнаружено', 'см', 'ГОСТ 30425-97'],
         ['Спорообразуюшие мезофильные аэробные и факультативно-анаэробные микроорганизмы '
          'группы В. subtilis', 'не обнаружено', 'не более 11 клеток в 1 г (см³)', 'ГОСТ 30425-97'],
     ], 'не допускаются в 1 г см')
])
def test_fix_centimeter_cell(table_rows, expected):
    """ Тестируем исправление выноса 'см' и его производных в отдельные ячейки. """
    result = fix_centimeter_cell(table_rows)
    assert result[2][2] == expected


test_data_for_divide_table = {
    (1, 'MAIN'): {'Заявитель, ИНН': 'АО «ДИКСИ ЮГ», ИНН: 5036045205'},

    (2, 'SAMPLE'): {'Шифр пробы': '8604-1', 'Группа продукции': 'Производство магазина',
                    'Наименование продукции': 'Изделие хлебобулочное: Слойка с мясом'},

    (4, 'RESULTS'): [
        ['Наименование показателя', 'Результат', 'Требования НД ТР ТС 029/2012', 'НД на методы испытаний'],
        ['Массовая доля бензойной кислоты, мг/кг', '<1,0*', '-', 'М 04-58-2009'],

        ['Наименование показателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
        ['свинецмышьяккадмий-Ртуть ', '0,068±0,021 <0,01*0,005*0.002*',
         'не более 0,35 не более 0,15 не более 0,07 не более 0,015',
         'М-02-1702-20М-02-1702-20М-02-1702-20ГОСТ Р 53183-2008'],
        ['ГХЦГ (а, р, у - изомеры)ДДТ и его метаболиты-гсксахлорбензолртутьорганические2,4-Д кислота, '
         'ее соли, эфиры',
         '<0,01*<0,01*<0,01*<0,01*<0,02*',
         'нс более 0,5 не более 0,02 не более 0,01 не допускаются не допускаются',
         'ГОСТ 32689.3-2014ГОСТ 32689.3-2014ГОСТ 32689.3-2014СТ РК 2040-2010МУ 1541-76'],

        ['Наименование показателя', 'Результат', 'Требования НД', 'НД на методы испытаний'],
        ['Общее количество мезофильных аэробных и факультативно-анаэробных бактерий (КМАФАнМ), КОЕ/г',
         '5,7х10²', 'не более 1,0x10³', 'МУК 4.2.2578-2010'],
        ['Колиформные бактерии', 'не обнаружено в 1,0 г', 'не допускаются в 1,0 г', 'ГОСТ 31747-2012']
    ],

    (5, 'SAMPLE'): {'Шифр пробы': '8604 - 2', 'Объект исследования': 'Воздух (микробная обсемененность)'},

    (6, 'RESULTS'): [
        ['№ п/п', 'Место отбора пробы', 'Наименованиепоказателя', 'Результат', 'Требования НД',
         'НД на методы исследований'],
        ['1', 'Холодильная камера «Молочные продукты»', 'Плесневые грибы, КОЕ', '0', '-',
         'Методические рекомендации по определению зараженности плесневыми '
         'грибами холодильных камер (с дополнениями)']],
    (8, 'PROD_CONTROL'): [
        ['№ п/п', 'Место измерений, наименование рабочего места', 'Измеряемый параметр', 'Измеряемый параметр',
         'Единицы измерений', 'Результат измерения*', 'Допустимое значение (ПДУ, ПДК)'],
        ['1', 'Отдел «Овощи/фрукты», рабочее место работника торгового зала(Па)', 'Температура воздуха', '0,1м', '°C',
         '20,3±0,6', '18-27']]}


def test_divide_the_table():
    result_tables = divide_the_table(test_data_for_divide_table)
    assert list(result_tables.keys()) == [(1, 'MAIN'), (2, 'SAMPLE'),
                                          (4.1, 'RESULTS'), (4.2, 'RESULTS'), (4.3, 'RESULTS'),
                                          (5, 'SAMPLE'), (6.1, 'RESULTS'), (8, 'PROD_CONTROL')]
    assert len(result_tables[(4.1, 'RESULTS')]) == 2
    assert len(result_tables[(4.2, 'RESULTS')]) == 3
    assert len(result_tables[(4.3, 'RESULTS')]) == 3
    assert result_tables[(6.1, 'RESULTS')] == test_data_for_divide_table[(6, 'RESULTS')]
