import datetime

import pytest

from league_sert.models.models_creator import split_code_and_address, create_date, create_manuf_prod


@pytest.mark.parametrize('text, expected_address, expected_code',
                         [
                             ('г. Кострома, ул. Юрия Беленогова, д. 17 А (44433)',
                              'г. Кострома, ул. Юрия Беленогова, д. 17 А',
                              44433),
                             ('Ленинградская область, Гатчинский р-н, '
                              'г. Гатчина, ул. Куприна, д. 48, л. А (№47109)',
                              'Ленинградская область, Гатчинский р-н, г. Гатчина, ул. Куприна, д. 48, л. А',
                              47109),
                             ('№ 47190, Ленинградская обл., Гатчинский р-н, п. Вырица, ул. Футбольная, Д. 29',
                              'Ленинградская обл., Гатчинский р-н, п. Вырица, ул. Футбольная, Д. 29',
                              47190),
                             ('МО, Сергиево-Посадский район, г. Сергиев Посад, ул. Куликова, д. 21А (№ 50445)',
                              'МО, Сергиево-Посадский район, г. Сергиев Посад, ул. Куликова, д. 21А',
                              50445),
                             ('г. Москва, ул. 1-я Рейсовая, д.12, корп.1 (№77367)',
                              'г. Москва, ул. 1-я Рейсовая, д.12, корп.1',
                              77367),
                             ('(№77367) г. Москва, ул. 1-я Рейсовая, д.12, корп.1',
                              'г. Москва, ул. 1-я Рейсовая, д.12, корп.1',
                              77367),
                         ])
def test_split_code_and_address(text, expected_address, expected_code):
    address, code = split_code_and_address(text)
    assert isinstance(address, str)
    assert isinstance(code, int)
    assert address == expected_address
    assert code == expected_code


@pytest.mark.parametrize('date_, expected_date',
                         [
                             ('11 мая 2024', datetime.date(2024, 5, 11)),
                             ('11 мая 2024 г.', datetime.date(2024, 5, 11)),
                             ('11 мая 2024 года', datetime.date(2024, 5, 11)),
                             ('11  мая   2024 г.', datetime.date(2024, 5, 11))
                         ])
def test_create_date(date_, expected_date):
    received_date = create_date(date_)
    assert isinstance(received_date, datetime.date)
    assert received_date == expected_date


date_manuf_prod = {'name_indic': 'Количество термофильных аэробных и факультативно-анаэробных микроорганизмов**',
                   'Шифр пробы': '9606-1',
                   'Группа продукции': 'Продукция производителя',
                   'Наименование продукции': 'Консервы стерилизованные. Говядина тушеная «ГРОДФУД»',
                   'НД на продукцию': '-',
                   'Дата производства продукции': '23.02.2024 г. Годен до 23.02.2028 г.',
                   'Производитель (фирма, предприятие, организация)': 'ООО «КВИНФУД»',
                   'Условия доставки': 'Автотранспорт, сумка-холодильник', 'Температура при доставке проб': '+3°С',
                   'Нарушения при доставке проб': 'Упаковка не нарушена', 'Вид упаковки': 'Производственная упаковка',
                   'Масса пробы': '2x338 г',
                   'Цель исследования': 'Производственный контроль. На соответствие требованиям ТР ТС 021/2011 «О безопасности пищевой продукции», угв. Решением КТС от 9 декабря 2011 года № 880; На соответствие требованиям ТР ТС 034/2013 «О безопасности мяса и мясной продукции». утв. Решением Совета ЕЭК от 9 октября 2013 года № 68 приложение 1',
                   'Дата проведения исследований': '26.09.2024 г.-07.10.2024 г.', 'result': 'не обнаружено',
                   'norm': 'не допускаются в 1 г (см³) при температуре хранения выше 20°С', 'norm_doc': 'ГОСТ 30425-97',
                   'conformity_main': False}


def test_create_manuf_prod():
    manuf_prod = create_manuf_prod(**date_manuf_prod)
    print(manuf_prod)